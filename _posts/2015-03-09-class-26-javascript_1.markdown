---
layout: post
title:  "Class 26: Mar. 9, 2015 [JavaScript Intro, the DOM, jQuery]"
date:   2015-03-09 22:33:28
categories: starter league
---

Today we entered a brand new arena: the language of <a title="JavaScript" href="http://en.wikipedia.org/wiki/JavaScript" target="_blank">JavaScript</a> (sometimes called 'the programming language of the Web') . And this will be our focus for the week, if not longer. Of course, JS is an entire world to itself but we're interested in it for the many ways it can help us improve the UX of our apps.

We were introduced to JS through our knowledge of Ruby, which we also extended a bit today. Raghu introduced us to Ruby's general purpose 'content_tag' method and asked us to consider how a member of the Ruby core team could have written it (so we entered the realm of <a title="Metaprogramming" href="http://en.wikipedia.org/wiki/Metaprogramming" target="_blank">metaprogramming</a> for a bit). We haven't seen a method yet that allows us to pass through an argument that is itself a block of code (rather than a simple variable containing data, e.g. a string). But we can in fact do this in Ruby (and other languages) using the data type known in Ruby (a 'closure' in computer science terms) as a <a title="Procs in Ruby" href="http://www.reactive.io/tips/2008/12/21/understanding-ruby-blocks-procs-and-lambdas/">proc</a> (according to the language specification, procs - a class in Ruby - <a title="Procs" href="http://ruby-doc.org/core-2.2.0/Proc.html" target="_blank">are</a> "blocks of code that have been bound to a set of local variables. Once bound, the code may be called in different contexts and still access those variables.") Until now, we have touched on a lot of important concepts in Ruby but we need to continue to build up our Ruby knowledge if we want to get to the next level as Rails developers. Being fluent in Ruby will only help us.

One reason we focused on procs and blocks of code today is because in JS we will be writing a lot of methods that accept blocks of code as arguments. JS is an event-driven paradigm - a callback pattern - that lacks a lot of the convenient methods that Ruby has built it, so we will find ourselves writing these methods ourselves.

Next, we spent some time comparing blocks of code from Ruby to similar structures in JavaScript, translating them in our heads so we have a sense of how the two languages compare. We are going to use JavaScript to query the DOM (Document Object Model) for some element(s) and then change those elements. I am not going to discuss the details of JavaScript here, as we were just introduced to the language today - we shall see more throughout the week.

But the final big-picture concept that Raghu introduced to us was the JS framework (the cross-platform third-party JavaScript library)  known as <a title="jQuery" href="http://en.wikipedia.org/wiki/JQuery" target="_blank">jQuery</a>, which we will be using heavily. Basically, jQuery is a framework of pre-written JavaScript that will greatly simplify our ability to interact with the DOM, as we shall see. It takes care of a lot of problems inherent to writing raw JavaScript and implementing cross-platform compatibility. JQuery provides us with a set of amazing methods that we get out of the box. It is simple but powerful, and we're going to explore it in more detail later this week.
